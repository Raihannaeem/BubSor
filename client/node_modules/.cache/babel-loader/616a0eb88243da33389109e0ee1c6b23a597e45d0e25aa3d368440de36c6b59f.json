{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raiha\\\\Desktop\\\\react-flask\\\\client\\\\src\\\\Test.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StreamComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const fetchStream = async () => {\n      try {\n        data = new FormData();\n        data.append('type', 'text');\n        data.append('text', 'what is CIBIL Score');\n        data.append('language', 'en-IN');\n        const response = await fetch(\"/fromuser\", {\n          method: 'POST',\n          body: data\n        });\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let partialData = \"\"; // Store incomplete data\n\n        while (true) {\n          const {\n            value,\n            done\n          } = await reader.read();\n          if (done) break;\n          const chunk = decoder.decode(value, {\n            stream: true\n          });\n          const lines = (partialData + chunk).split(\"\\n\");\n\n          // Store last item as partial data in case it's incomplete\n          partialData = lines.pop();\n          setMessages(prev => [...prev, ...lines.filter(line => line)]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching stream:\", error);\n      }\n    };\n    fetchStream();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-time Streaming Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamComponent, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = StreamComponent;\nexport default StreamComponent;\nvar _c;\n$RefreshReg$(_c, \"StreamComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","StreamComponent","_s","messages","setMessages","fetchStream","data","FormData","append","response","fetch","method","body","reader","getReader","decoder","TextDecoder","partialData","value","done","read","chunk","decode","stream","lines","split","pop","prev","filter","line","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","_c","$RefreshReg$"],"sources":["C:/Users/raiha/Desktop/react-flask/client/src/Test.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst StreamComponent = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchStream = async () => {\r\n      try {\r\n        data= new FormData()\r\n        data.append('type','text')\r\n        data.append('text','what is CIBIL Score')\r\n        data.append('language','en-IN')\r\n        \r\n        const response = await fetch(\"/fromuser\",{\r\n            method:'POST',\r\n            body: data\r\n        });\r\n        const reader = response.body.getReader();\r\n        const decoder = new TextDecoder();\r\n\r\n        let partialData = \"\"; // Store incomplete data\r\n\r\n        while (true) {\r\n          const { value, done } = await reader.read();\r\n          if (done) break;\r\n\r\n          const chunk = decoder.decode(value, { stream: true });\r\n          const lines = (partialData + chunk).split(\"\\n\");\r\n\r\n          // Store last item as partial data in case it's incomplete\r\n          partialData = lines.pop();\r\n\r\n          setMessages(prev => [...prev, ...lines.filter(line => line)]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching stream:\", error);\r\n      }\r\n    };\r\n\r\n    fetchStream();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Real-time Streaming Messages</h2>\r\n      <ul>\r\n        {messages.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACFC,IAAI,GAAE,IAAIC,QAAQ,CAAC,CAAC;QACpBD,IAAI,CAACE,MAAM,CAAC,MAAM,EAAC,MAAM,CAAC;QAC1BF,IAAI,CAACE,MAAM,CAAC,MAAM,EAAC,qBAAqB,CAAC;QACzCF,IAAI,CAACE,MAAM,CAAC,UAAU,EAAC,OAAO,CAAC;QAE/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAC;UACrCC,MAAM,EAAC,MAAM;UACbC,IAAI,EAAEN;QACV,CAAC,CAAC;QACF,MAAMO,MAAM,GAAGJ,QAAQ,CAACG,IAAI,CAACE,SAAS,CAAC,CAAC;QACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;QAEjC,IAAIC,WAAW,GAAG,EAAE,CAAC,CAAC;;QAEtB,OAAO,IAAI,EAAE;UACX,MAAM;YAAEC,KAAK;YAAEC;UAAK,CAAC,GAAG,MAAMN,MAAM,CAACO,IAAI,CAAC,CAAC;UAC3C,IAAID,IAAI,EAAE;UAEV,MAAME,KAAK,GAAGN,OAAO,CAACO,MAAM,CAACJ,KAAK,EAAE;YAAEK,MAAM,EAAE;UAAK,CAAC,CAAC;UACrD,MAAMC,KAAK,GAAG,CAACP,WAAW,GAAGI,KAAK,EAAEI,KAAK,CAAC,IAAI,CAAC;;UAE/C;UACAR,WAAW,GAAGO,KAAK,CAACE,GAAG,CAAC,CAAC;UAEzBtB,WAAW,CAACuB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGH,KAAK,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC;QAC/D;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDzB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAAgC,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCpC,OAAA;MAAAgC,QAAA,EACG7B,QAAQ,CAACkC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBvC,OAAA;QAAAgC,QAAA,EAAiBM;MAAG,GAAXC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAClC,EAAA,CAlDID,eAAe;AAAAuC,EAAA,GAAfvC,eAAe;AAoDrB,eAAeA,eAAe;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}