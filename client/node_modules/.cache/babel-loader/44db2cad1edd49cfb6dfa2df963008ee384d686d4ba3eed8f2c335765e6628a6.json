{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raiha\\\\Desktop\\\\react-flask\\\\client\\\\src\\\\audiorecorder.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [audioFiles, setAudioFiles] = useState([]);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const [file, setFile] = useState();\n  const toggleRecording = async () => {\n    recording ? stopRecording() : await startRecording();\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = e => audioChunksRef.current.push(e.data);\n      mediaRecorderRef.current.onstop = saveRecording;\n      mediaRecorderRef.current.start();\n      setRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n  const stopRecording = () => {\n    var _mediaRecorderRef$cur;\n    (_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.stop();\n    setRecording(false);\n  };\n  const saveRecording = () => {\n    const audioBlob = new Blob(audioChunksRef.current, {\n      type: \"audio/wav\"\n    });\n    const file = new File([audioBlob], `recording_${Date.now()}.wav`, {\n      type: \"audio/wav\"\n    });\n    const url = URL.createObjectURL(audioBlob);\n    setFile(file);\n    const data = new FormData();\n    data.append(\"file\", file);\n    fetch(\"/uploadone\", {\n      method: \"POST\",\n      body: data\n    }).then(res => res.json()).then(data => console.log(data.msg)).catch(error => console.error(\"Upload error:\", error));\n    setAudioFiles(prev => [...prev, {\n      url,\n      file\n    }]);\n    audioChunksRef.current = [];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Audio Recorder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleRecording,\n      children: recording ? \"Stop Recording\" : \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), audioFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: audioFiles.map(({\n        url,\n        file\n      }, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: url,\n            type: \"audio/wav\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this), \"Your browser does not support the audio element.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"tPD65RK0LPmD85DJRJ/ILUwCvmQ=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","AudioRecorder","_s","recording","setRecording","audioFiles","setAudioFiles","mediaRecorderRef","audioChunksRef","file","setFile","toggleRecording","stopRecording","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","e","push","data","onstop","saveRecording","start","error","console","_mediaRecorderRef$cur","stop","audioBlob","Blob","type","File","Date","now","url","URL","createObjectURL","FormData","append","fetch","method","body","then","res","json","log","msg","catch","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","index","controls","src","_c","$RefreshReg$"],"sources":["C:/Users/raiha/Desktop/react-flask/client/src/audiorecorder.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\nconst AudioRecorder = () => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [audioFiles, setAudioFiles] = useState([]);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n  const [file,setFile]=useState()\r\n\r\n  const toggleRecording = async () => {\r\n    recording ? stopRecording() : await startRecording();\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      mediaRecorderRef.current.ondataavailable = (e) => audioChunksRef.current.push(e.data);\r\n      mediaRecorderRef.current.onstop = saveRecording;\r\n      mediaRecorderRef.current.start();\r\n      setRecording(true);\r\n    } catch (error) {\r\n      console.error(\"Error accessing microphone:\", error);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    mediaRecorderRef.current?.stop();\r\n    setRecording(false);\r\n  };\r\n\r\n  const saveRecording = () => {\r\n    const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/wav\" });\r\n    const file = new File([audioBlob], `recording_${Date.now()}.wav`, { type: \"audio/wav\" });\r\n    const url = URL.createObjectURL(audioBlob);\r\n    setFile(file)\r\n    \r\n    const data = new FormData();\r\n    data.append(\"file\", file);\r\n    fetch(\"/uploadone\", { method: \"POST\", body: data })\r\n      .then((res) => res.json())\r\n      .then((data) => console.log(data.msg))\r\n      .catch((error) => console.error(\"Upload error:\", error));\r\n    \r\n    setAudioFiles((prev) => [...prev, { url, file }]);\r\n    audioChunksRef.current = [];\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Audio Recorder</h2>\r\n      <button onClick={toggleRecording}>{recording ? \"Stop Recording\" : \"Start Recording\"}</button>\r\n      {audioFiles.length > 0 && (\r\n        <div>\r\n          {audioFiles.map(({ url, file }, index) => (\r\n            <div key={index}>\r\n              <audio controls>\r\n                <source src={url} type=\"audio/wav\" />\r\n                Your browser does not support the audio element.\r\n              </audio>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}